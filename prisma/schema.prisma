generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DEV_DATABASE_URL")
}

model User {
  id               String            @id
  name             String
  email            String            @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  role             String?
  acceptenceState  String?           @default("idle")
  cvKey            String?
  bio              String?
  phone            Int?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  noStudents       Int               @default(0)
  trainingHours    Int               @default(0)
  level            String            @default("LEVEL_1")
  region           String            @default("none")
  eduAdminId       String?
  regionId         String?
  schoolId         String?
  Account          Account[]
  sentMessages     Message[]         @relation("SentMessages")
  receivedMessages Message[]         @relation("ReceivedMessages")
  reports          Report[]
  Session          Session[]
  //userEduAdmin     EduAdmin?         @relation(fields: [eduAdminId], references: [id])
  //userRegion       Region?           @relation(fields: [regionId], references: [id])
  //userSchool       School?           @relation(fields: [schoolId], references: [id])
  UserCertificate  UserCertificate[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  createdAt      DateTime
  token          String   @unique
  updatedAt      DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  password              String?
  accessTokenExpiresAt  DateTime?
  createdAt             DateTime
  refreshTokenExpiresAt DateTime?
  scope                 String?
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Material {
  id         String   @id @default(cuid())
  storageKey String
  title      String
  categoryId String?
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  //category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("material")
}

model Program {
  id          String   @id @default(cuid())
  link        String
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  image       String?

  @@map("program")
}

model Category {
  id        String     @id @default(cuid())
  title     String     @unique
  icon      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  //Material  Material[]

  @@map("category")
}

model Article {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("article")
}

model Statistics {
  id              String   @id @default("stats")
  registeredUsers Int      @default(0)
  trainingHours   Int      @default(0)
  updatedAt       DateTime @updatedAt
  curriculums     Int      @default(0)

  @@map("statistics")
}

model UserCertificate {
  id             String @id @default(cuid())
  userId         String
  certificateKey String
  contentType    String
  size           Int
  name           String
  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("userCertificate")
}

model Region {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  //eduAdmins EduAdmin[]
  //users     User[]

  @@map("region")
}

model EduAdmin {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //users     User[]

  @@map("eduAdministration")
}

model School {
  id         String   @id @default(cuid())
  name       String
  address    String
  //eduAdminId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  //eduAdmin   EduAdmin @relation(fields: [eduAdminId], references: [id])
  //users      User[]

  @@map("school")
}

model Report {
  id                     String              @id @default(cuid())
  userId                 String
  volunteerHours         Float
  economicValue          Float
  volunteerOpportunities Int
  activitiesCount        Int
  volunteerCount         Int
  skillsEconomicValue    Float
  skillsTrainedCount     Int
  attachedFiles          String[]
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  user                   User                @relation(fields: [userId], references: [id])
  skills                 SkillReport[]
  testimonials           TestimonialReport[]

  @@map("report")
}

model Skill {
  id          String        @id @default(cuid())
  name        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reports     SkillReport[]

  @@map("skill")
}

model SkillReport {
  skillId   String
  reportId  String
  createdAt DateTime @default(now())
  report    Report   @relation(fields: [reportId], references: [id])
  skill     Skill    @relation(fields: [skillId], references: [id])

  @@id([skillId, reportId])
  @@map("skill_report")
}

model Testimonial {
  id        String              @id @default(cuid())
  name      String
  comment   String
  rating    Int                 @default(5)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  reports   TestimonialReport[]

  @@map("testimonial")
}

model TestimonialReport {
  testimonialId String
  reportId      String
  createdAt     DateTime    @default(now())
  report        Report      @relation(fields: [reportId], references: [id])
  testimonial   Testimonial @relation(fields: [testimonialId], references: [id])

  @@id([testimonialId, reportId])
  @@map("testimonial_report")
}

model Message {
  id         String    @id @default(cuid())
  content    String
  sentAt     DateTime  @default(now())
  isRead     Boolean   @default(false)
  readAt     DateTime?
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  fromUserId String
  toUserId   String
  fromUser   User      @relation("SentMessages", fields: [fromUserId], references: [id])
  toUser     User      @relation("ReceivedMessages", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([isRead])
  @@map("message")
}
